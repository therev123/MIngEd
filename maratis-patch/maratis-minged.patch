Index: 3rdparty/npk/include/npk_dev.h
===================================================================
--- 3rdparty/npk/include/npk_dev.h	(revision 126)
+++ 3rdparty/npk/include/npk_dev.h	(working copy)
@@ -1,6 +1,6 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
     header for npk development mode
@@ -116,7 +116,7 @@
 NPK_DEV_API NPK_RESULT  npk_prepare_entityname( NPK_CSTR src, NPK_STR dst, size_t dstLen );
 
 /* File I/O Functions */
-NPK_DEV_API NPK_RESULT  npk_open( int* handle, NPK_CSTR fileName, bool createfile, bool bcheckexist );
+NPK_DEV_API NPK_RESULT  npk_open( NPK_HANDLE* handle, NPK_CSTR fileName, bool createfile, bool bcheckexist );
 NPK_DEV_API NPK_RESULT  npk_flush( NPK_HANDLE handle );
 NPK_DEV_API NPK_RESULT  npk_close( NPK_HANDLE handle );
 
@@ -156,6 +156,16 @@
 NPK_DEV_API NPK_RESULT  npk_package_remove_all_entity( NPK_PACKAGE package );
 NPK_DEV_API NPK_RESULT  npk_package_detach_all_entity( NPK_PACKAGE package );
 
+
+extern npk_open_func   __open;
+extern npk_close_func  __close;
+extern npk_read_func   __read;
+extern npk_write_func  __write;
+extern npk_seek_func   __seek;
+extern npk_tell_func   __tell;
+extern npk_rewind_func __rewind;
+extern npk_commit_func __commit;
+
 #ifdef __cplusplus
 }
 #endif
Index: 3rdparty/npk/include/npk.h
===================================================================
--- 3rdparty/npk/include/npk.h	(revision 126)
+++ 3rdparty/npk/include/npk.h	(working copy)
@@ -1,6 +1,6 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
 */
@@ -12,7 +12,6 @@
 #include "npk_base.h"
 #include "npk_error.h"
 
-#define NPK_DEV
 
 #ifdef __cplusplus
 extern "C" {
@@ -42,6 +41,25 @@
 NPK_API void        npk_disable_criticalsection ();
 #endif
 
+// custom file I/O
+typedef void*  (*npk_open_func)  (const char*, const char*); // filename, mode as per fopen (ie "r" "wb+" etc)
+typedef int    (*npk_close_func) (void*);
+typedef size_t (*npk_read_func)  (void*, size_t, size_t, void*);
+typedef size_t (*npk_write_func) (const void*, size_t, size_t, void*);
+typedef int    (*npk_seek_func)  (void*, long, int);
+typedef long   (*npk_tell_func)  (void*);
+typedef void   (*npk_rewind_func)(void*);
+typedef void   (*npk_commit_func)(void*);
+
+NPK_API void npk_io_open_func  (npk_open_func func);
+NPK_API void npk_io_close_func (npk_close_func func);
+NPK_API void npk_io_read_func  (npk_read_func func);
+NPK_API void npk_io_write_func (npk_write_func func);
+NPK_API void npk_io_seek_func  (npk_seek_func func);
+NPK_API void npk_io_tell_func  (npk_tell_func func);
+NPK_API void npk_io_rewind_func(npk_rewind_func func);
+NPK_API void npk_io_commit_func(npk_commit_func func);
+
 #ifdef __cplusplus
 }
 #endif
Index: 3rdparty/npk/include/npk_conf.h
===================================================================
--- 3rdparty/npk/include/npk_conf.h	(revision 126)
+++ 3rdparty/npk/include/npk_conf.h	(working copy)
@@ -1,6 +1,6 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
     configuration of npk
@@ -31,6 +31,7 @@
 #if defined(_WIN32) || defined(_WIN64)
     #define NPK_PLATFORM_WINDOWS
     #define NPK_PLATFORM_NAME "Windows"
+ 	typedef int mode_t;
 #elif defined(linux) || defined(__linux) || defined(__linux__)
     #define NPK_PLATFORM_LINUX
     #define NPK_PLATFORM_NAME "Linux"
@@ -76,4 +77,80 @@
     #define NPK_DEV_API
 #endif /* NPK_PLATFORM_WINDOWS */
 
+#ifdef NPK_PREFIX
+    #define CONCAT_X(t1,t2) t1##t2
+    #define CONCAT(t1,t2) CONCAT_X(t1,t2)
+
+    #define g_npkError                      CONCAT(NPK_PREFIX_NAME,g_npkError)
+    #define g_callbackfp                    CONCAT(NPK_PREFIX_NAME,g_callbackfp)
+    #define g_callbackSize                  CONCAT(NPK_PREFIX_NAME,g_callbackSize)
+
+    #define npk_package_open                CONCAT(NPK_PREFIX_NAME,npk_package_open)
+    #define npk_package_open_with_fd        CONCAT(NPK_PREFIX_NAME,npk_package_open_with_fd)
+    #define npk_package_close               CONCAT(NPK_PREFIX_NAME,npk_package_close)
+    #define npk_package_get_entity          CONCAT(NPK_PREFIX_NAME,npk_package_get_entity)
+    #define npk_package_get_first_entity    CONCAT(NPK_PREFIX_NAME,npk_package_get_first_entity)
+    #define npk_entity_get_name             CONCAT(NPK_PREFIX_NAME,npk_entity_get_name)
+    #define npk_entity_get_size             CONCAT(NPK_PREFIX_NAME,npk_entity_get_size)
+    #define npk_entity_get_packed_size      CONCAT(NPK_PREFIX_NAME,npk_entity_get_packed_size)
+    #define npk_entity_get_offset           CONCAT(NPK_PREFIX_NAME,npk_entity_get_offset)
+    #define npk_entity_is_ready             CONCAT(NPK_PREFIX_NAME,npk_entity_is_ready)
+    #define npk_entity_next                 CONCAT(NPK_PREFIX_NAME,npk_entity_next)
+    #define npk_entity_read                 CONCAT(NPK_PREFIX_NAME,npk_entity_read)
+    #define npk_entity_read_partial         CONCAT(NPK_PREFIX_NAME,npk_entity_read_partial)
+    #define npk_enable_callback             CONCAT(NPK_PREFIX_NAME,npk_enable_callback)
+    #define npk_disable_callback            CONCAT(NPK_PREFIX_NAME,npk_disable_callback)
+    #define npk_error_to_str                CONCAT(NPK_PREFIX_NAME,npk_error_to_str)
+    #define npk_enable_criticalsection      CONCAT(NPK_PREFIX_NAME,npk_enable_criticalsection)
+    #define npk_disable_criticalsection     CONCAT(NPK_PREFIX_NAME,npk_disable_criticalsection)
+
+    #define npk_log                         CONCAT(NPK_PREFIX_NAME,npk_log)
+    #define npk_error                       CONCAT(NPK_PREFIX_NAME,npk_error)
+    #define npk_alloc_copy_string           CONCAT(NPK_PREFIX_NAME,npk_alloc_copy_string)
+    #define npk_get_filetime                CONCAT(NPK_PREFIX_NAME,npk_get_filetime)
+    #define npk_set_filetime                CONCAT(NPK_PREFIX_NAME,npk_set_filetime)
+    #define npk_filetime_to_unixtime        CONCAT(NPK_PREFIX_NAME,npk_filetime_to_unixtime)
+    #define npk_enable_gluetime             CONCAT(NPK_PREFIX_NAME,npk_enable_gluetime)
+    #define npk_disable_gluetime            CONCAT(NPK_PREFIX_NAME,npk_disable_gluetime)
+    #define npk_get_bucket                  CONCAT(NPK_PREFIX_NAME,npk_get_bucket)
+    #define npk_prepare_entityname          CONCAT(NPK_PREFIX_NAME,npk_prepare_entityname)
+
+    #define npk_open                        CONCAT(NPK_PREFIX_NAME,npk_open)
+    #define npk_flush                       CONCAT(NPK_PREFIX_NAME,npk_flush)
+    #define npk_close                       CONCAT(NPK_PREFIX_NAME,npk_close)
+
+    #define npk_seek                        CONCAT(NPK_PREFIX_NAME,npk_seek)
+    #define npk_tell                        CONCAT(NPK_PREFIX_NAME,npk_tell)
+    #define npk_read                        CONCAT(NPK_PREFIX_NAME,npk_read)
+    #define npk_write                       CONCAT(NPK_PREFIX_NAME,npk_write)
+    #define npk_read_encrypt                CONCAT(NPK_PREFIX_NAME,npk_read_encrypt)
+    #define npk_write_encrypt               CONCAT(NPK_PREFIX_NAME,npk_write_encrypt)
+
+    #define npk_entity_alloc                CONCAT(NPK_PREFIX_NAME,npk_entity_alloc)
+    #define npk_entity_init                 CONCAT(NPK_PREFIX_NAME,npk_entity_init)
+    #define npk_entity_get_current_flag     CONCAT(NPK_PREFIX_NAME,npk_entity_get_current_flag)
+    #define npk_entity_get_new_flag         CONCAT(NPK_PREFIX_NAME,npk_entity_get_new_flag)
+    #define npk_entity_set_flag             CONCAT(NPK_PREFIX_NAME,npk_entity_set_flag)
+    #define npk_entity_add_flag             CONCAT(NPK_PREFIX_NAME,npk_entity_add_flag)
+    #define npk_entity_sub_flag             CONCAT(NPK_PREFIX_NAME,npk_entity_sub_flag)
+    #define npk_entity_write                CONCAT(NPK_PREFIX_NAME,npk_entity_write)
+    #define npk_entity_export               CONCAT(NPK_PREFIX_NAME,npk_entity_export)
+
+    #define npk_package_alloc               CONCAT(NPK_PREFIX_NAME,npk_package_alloc)
+    #define npk_package_init                CONCAT(NPK_PREFIX_NAME,npk_package_init)
+    #define npk_package_save                CONCAT(NPK_PREFIX_NAME,npk_package_save)
+    #define npk_package_clear               CONCAT(NPK_PREFIX_NAME,npk_package_clear)
+    #define npk_package_add_file            CONCAT(NPK_PREFIX_NAME,npk_package_add_file)
+    #define npk_package_add_entity          CONCAT(NPK_PREFIX_NAME,npk_package_add_entity)
+    #define npk_package_remove_entity       CONCAT(NPK_PREFIX_NAME,npk_package_remove_entity)
+    #define npk_package_detach_entity       CONCAT(NPK_PREFIX_NAME,npk_package_detach_entity)
+    #define npk_package_remove_all_entity   CONCAT(NPK_PREFIX_NAME,npk_package_remove_all_entity)
+    #define npk_package_detach_all_entity   CONCAT(NPK_PREFIX_NAME,npk_package_detach_all_entity)
+    #define __npk_package_add_entity        CONCAT(NPK_PREFIX_NAME,__npk_package_add_entity)
+    #define __npk_package_open              CONCAT(NPK_PREFIX_NAME,__npk_package_open)
+    #define __npk_package_remove_all_entity CONCAT(NPK_PREFIX_NAME,__npk_package_remove_all_entity)
+
+
+#endif /* NPK_PREFIX */
+
 #endif /* _NPK_DEF_H_ */
Index: 3rdparty/npk/include/npk_error.h
===================================================================
--- 3rdparty/npk/include/npk_error.h	(revision 126)
+++ 3rdparty/npk/include/npk_error.h	(working copy)
@@ -1,6 +1,6 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
     npk error code
@@ -11,7 +11,7 @@
 #define _NPK_ERROR_H_
 
 // Success
-#define NPK_SUCCESS                                         1
+#define NPK_SUCCESS                                              1
 
 
 // Error
Index: 3rdparty/npk/include/npk_base.h
===================================================================
--- 3rdparty/npk/include/npk_base.h	(revision 126)
+++ 3rdparty/npk/include/npk_base.h	(working copy)
@@ -1,6 +1,6 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
     base type and definitions of npk
@@ -15,7 +15,7 @@
 typedef int                             NPK_RESULT;
 typedef void*                           NPK_PACKAGE;
 typedef void*                           NPK_ENTITY;
-typedef int                             NPK_HANDLE;
+typedef ptrdiff_t                       NPK_HANDLE;
 typedef unsigned int                    NPK_FLAG;
 typedef unsigned int                    NPK_HASHKEY;
 typedef int                             NPK_TEAKEY;
Index: 3rdparty/npk/src/npk_dev.c
===================================================================
--- 3rdparty/npk/src/npk_dev.c	(revision 126)
+++ 3rdparty/npk/src/npk_dev.c	(working copy)
@@ -1,17 +1,17 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
 */
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <stddef.h>
 #include <stdarg.h>
 #include <time.h>
 #include <errno.h>
 #include <fcntl.h>
-#include <memory.h>
 #include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -112,22 +112,28 @@
 {
     if( handle != 0 )
     {
+        if(__commit == NULL)
 #ifdef NPK_PLATFORM_WINDOWS
-    _commit( handle );
+            _commit( handle );
 #else
-    fsync( handle );
+            fsync( handle );
 #endif
+        else
+            __commit( (void*)handle );
     }
     return NPK_SUCCESS;
 }
 
 long npk_tell( NPK_HANDLE handle )
 {
+    if(__seek == NULL)
 #ifdef NPK_PLATFORM_WINDOWS
-    return _lseek( handle, 0, SEEK_CUR );
+        return _lseek( handle, 0, SEEK_CUR );
 #else
-    return lseek( handle, 0, SEEK_CUR );
+        return lseek( handle, 0, SEEK_CUR );
 #endif
+    else
+        return __seek( (void*)handle, 0, SEEK_CUR );
 }
 
 NPK_RESULT npk_write( NPK_HANDLE handle, const void* buf, NPK_SIZE size,
@@ -150,7 +156,10 @@
             if( (int)( size - totalwritten ) < unit )
                 unit = size - totalwritten;
 
-            currentwritten = write( handle, (NPK_STR)buf + totalwritten, (unsigned int)unit );
+            if( __write == NULL)
+                currentwritten = write( handle, (NPK_STR)buf + totalwritten, (unsigned int)unit );
+            else
+                currentwritten = __write( (NPK_STR)buf + totalwritten, sizeof(char*), (unsigned int)unit, (void*)handle );
 
             if( currentwritten < unit )
             {
@@ -257,7 +266,7 @@
     void*               buf = NULL;
     void*               buf_for_zlib = NULL;
     NPK_SIZE            size, endpos, startpos;
-    int                 filehandle;
+    NPK_HANDLE          filehandle;
     int                 z_res;
 
     if( !eb )
@@ -453,7 +462,7 @@
     NPK_SIZE            len;
     int                 savecount = 0;
     NPK_STR             savefilename = NULL;
-    int                 savefilehandle;
+    NPK_HANDLE          savefilehandle;
     NPK_CHAR*           buf;
     NPK_CHAR*           buf_pos;
     NPK_PACKAGEINFO_V23 header_v23;
Index: 3rdparty/npk/src/npk.c
===================================================================
--- 3rdparty/npk/src/npk.c	(revision 126)
+++ 3rdparty/npk/src/npk.c	(working copy)
@@ -1,13 +1,13 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
 */
 
 #include <stdio.h>
 #include <stdlib.h>
-#include <memory.h>
+#include <stddef.h>
 #include <time.h>
 #include <sys/stat.h>
 #include "npk.h"
@@ -283,10 +283,8 @@
 
 npk_package_open_return_null_with_free:
     if( pb )
-        if( pb->handle_ > 0 )
-            npk_close( pb->handle_ );
+        npk_package_close( pb );
 
-    NPK_SAFE_FREE( pb );
     return NULL;
 }
 
@@ -313,10 +311,8 @@
 
 npk_package_open_return_null_with_free:
     if( pb )
-        if( pb->handle_ > 0 )
-            npk_close( pb->handle_ );
+        npk_package_close( pb );
 
-    NPK_SAFE_FREE( pb );
     return NULL;
 }
 
@@ -609,6 +605,8 @@
 
     if( eb->info_.flag_ & NPK_ENTITY_ENCRYPT_TEA )
         tea_decode_buffer(buf, size, pb->teakey_, (pb->info_.version_ >= NPK_VERSION_ENCRYPTREMAINS));
+    if( eb->info_.flag_ & NPK_ENTITY_ENCRYPT_XXTEA )
+        xxtea_decode_buffer(buf, size, pb->teakey_, (pb->info_.version_ >= NPK_VERSION_ENCRYPTREMAINS));
 
 #ifdef NPK_PLATFORM_WINDOWS
     if( g_useCriticalSection )
Index: 3rdparty/npk/src/npk_common.c
===================================================================
--- 3rdparty/npk/src/npk_common.c	(revision 126)
+++ 3rdparty/npk/src/npk_common.c	(working copy)
@@ -1,17 +1,17 @@
 /*
 
-    npk - General-Purpose File Packing Library
+    npk - neat package system
     See README for copyright and license information.
 
 */
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <stddef.h>
 #include <stdarg.h>
 #include <time.h>
 #include <errno.h>
 #include <fcntl.h>
-#include <memory.h>
 #include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -32,6 +32,25 @@
 #include "zlib.h"
 
 
+npk_open_func   __open   = NULL;
+npk_close_func  __close  = NULL;
+npk_read_func   __read   = NULL;
+npk_write_func  __write  = NULL;
+npk_seek_func   __seek   = NULL;
+npk_tell_func   __tell   = NULL;
+npk_rewind_func __rewind = NULL;
+npk_commit_func __commit = NULL;
+
+NPK_API void npk_io_open_func  (npk_open_func func)  { __open   = func; }
+NPK_API void npk_io_close_func (npk_close_func func) { __close  = func; }
+NPK_API void npk_io_read_func  (npk_read_func func)  { __read   = func; }
+NPK_API void npk_io_write_func (npk_write_func func) { __write  = func; }
+NPK_API void npk_io_seek_func  (npk_seek_func func)  { __seek   = func; }
+NPK_API void npk_io_tell_func  (npk_tell_func func)  { __tell   = func; }
+NPK_API void npk_io_rewind_func(npk_rewind_func func){ __rewind = func; }
+NPK_API void npk_io_commit_func(npk_commit_func func){ __commit = func; }
+
+
 NPK_RESULT npk_error( NPK_RESULT res )
 {
     g_npkError = res;
@@ -161,26 +180,56 @@
     *pt = (NPK_TIME)((*pft - 116444736000000000LL)/10000000LL);
 }
 
-NPK_RESULT npk_open( int* handle, NPK_CSTR fileName, bool createfile, bool bcheckexist )
+NPK_RESULT npk_open( NPK_HANDLE* handle, NPK_CSTR fileName, bool createfile, bool bcheckexist )
 {
     if( createfile )
     {
+        mode_t mask = umask(0);
         if( bcheckexist )
         {
-            *handle = open( fileName, O_CREAT | O_EXCL | O_RDWR | O_BINARY, S_IREAD | S_IWRITE );
+#ifdef NPK_PLATFORM_WINDOWS
+            if(__open == NULL)
+                *handle = open( fileName, O_CREAT | O_EXCL | O_RDWR | O_BINARY, S_IREAD & S_IWRITE );
+            else
+                *handle = (NPK_HANDLE)__open( fileName, "wb+" );
+#else
+            if(__open == NULL)
+                *handle = open( fileName, O_CREAT | O_EXCL | O_RDWR | O_BINARY, 0666 );
+            else
+                *handle = (NPK_HANDLE)__open( fileName, "wb+" );
+            if( *handle != -1 ) fchmod( *handle, 0666&~mask );
+#endif
         }
         else
         {
             *handle = creat( fileName, S_IREAD | S_IWRITE );
             if( errno == EACCES )
                 return( npk_error( NPK_ERROR_ReadOnlyFile ) );
-            close( *handle );
+            if(__close == NULL)
+                close( *handle );
+            else
+                __close((void*)*handle);
 
-            *handle = open( fileName, O_CREAT | O_RDWR | O_BINARY, S_IREAD | S_IWRITE );
+#ifdef NPK_PLATFORM_WINDOWS
+            if(__open == NULL)
+                *handle = open( fileName, O_CREAT | O_RDWR | O_BINARY, S_IREAD & S_IWRITE );
+            else
+                *handle = (NPK_HANDLE)__open( fileName, "wb+" );
+#else
+            if(__open == NULL)
+                *handle = open( fileName, O_CREAT | O_RDWR | O_BINARY, 0666 );
+            else
+                *handle = (NPK_HANDLE)__open( fileName, "wb+" );
+            if( *handle != -1 ) fchmod( *handle, 0666&~mask );
+#endif
         }
+        umask( mask );
     }
     else
-        *handle = open( fileName, O_BINARY | O_RDONLY );
+        if(__open == NULL)
+            *handle = open( fileName, O_BINARY | O_RDONLY );
+        else
+            *handle = (NPK_HANDLE)__open( fileName, "rb+" );
 
     if( *handle == -1 )
     {
@@ -197,19 +246,25 @@
 
 NPK_RESULT npk_close( NPK_HANDLE handle )
 {
-    if( handle != 0 )
-        close( handle );
+    if( handle > 0 )
+        if(__close == NULL)
+            close( handle );
+        else
+            __close((void*)handle);
 
     return NPK_SUCCESS;
 }
 
 long npk_seek( NPK_HANDLE handle, long offset, int origin )
 {
+    if(__seek == NULL)
 #ifdef NPK_PLATFORM_WINDOWS
-    return _lseek( handle, offset, origin );
+        return _lseek( handle, offset, origin );
 #else
-    return lseek( handle, offset, origin );
+        return lseek( handle, offset, origin );
 #endif
+    else
+        return __seek((void*)handle, offset, origin);
 }
 
 NPK_RESULT npk_read( NPK_HANDLE handle, void* buf, NPK_SIZE size,
@@ -218,6 +273,7 @@
     NPK_SIZE currentread;
     NPK_SIZE totalread = 0;
     NPK_SIZE unit = cbsize;
+    
 
     if( cb )
     {
@@ -232,7 +288,10 @@
             if( ( size - totalread ) < unit )
                 unit = size - totalread;
 
-            currentread = read( handle, (NPK_STR)buf + totalread, (unsigned int)unit );
+            if(__read == NULL)
+                currentread = read( handle, (NPK_STR)buf + totalread, (unsigned int)unit );
+            else
+                currentread = __read( (NPK_STR)buf + totalread, sizeof(char), unit, (void*)handle );
 
             if( currentread < unit )
             {
@@ -251,7 +310,10 @@
     }
     else
     {
-        currentread = read( handle, (NPK_STR)buf, size );
+	if(__read == NULL)
+	    currentread = read( handle, (NPK_STR)buf, size );
+	else
+	    currentread = __read((NPK_STR)buf, sizeof(char), size, (void*)handle);
 
         if( currentread < size )
         {
Index: trunk/dev/MSDK/MGui/Includes/MGuiWindow.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiWindow.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiWindow.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI_WINDOW_H
 
 
-class MGuiWindow : public MGui2d
+class M_GUI_EXPORT MGuiWindow : public MGui2d
 {
 private:
 
Index: trunk/dev/MSDK/MGui/Includes/MGui.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGui.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGui.h	(working copy)
@@ -32,6 +32,25 @@
 #define _M_GUI_H
 
 
+#ifdef WIN32
+
+	// M_GUI_EXPORT
+	#if defined(MGUI_DLL)
+		#define M_GUI_EXPORT __declspec( dllexport )
+	#elif defined(MGUI_STATIC)
+		#define M_GUI_EXPORT
+	#else
+		#define M_GUI_EXPORT __declspec( dllimport )
+	#endif
+
+#else
+
+	// M_GUI_EXPORT
+	#define M_GUI_EXPORT
+
+#endif
+
+
 // variable types
 enum M_VAR_TYPE
 {
@@ -70,12 +89,15 @@
 #include "MGuiFileBrowser.h"
 
 
+typedef bool(*imageLoadFunc)(const char*, void*);
+
 // global functions
 void set2dMode(MRenderingContext * render);
+void setImageLoader(imageLoadFunc func);
 
 
 // gui texture
-class MGuiTexture
+class M_GUI_EXPORT MGuiTexture
 {
 public:
 
@@ -84,7 +106,7 @@
 };
 
 // MGui
-class MGui
+class M_GUI_EXPORT MGui
 {
 public:
 
@@ -112,11 +134,15 @@
 	// windows
 	std::vector <MGuiWindow *> m_windows;
 
+	MDataLoader m_imageLoader;
+
 public:
 
 	// rendering context
 	void setRenderingContext(MRenderingContext * render){ m_render = render; }
 	MRenderingContext * getRenderingContext(void){ return m_render; }
+	
+	MDataLoader * getImageLoader(void){ return &m_imageLoader; }
 
 	// windows
 	void unHighLightAllWindows(void);
Index: trunk/dev/MSDK/MGui/Includes/MMouse.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MMouse.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MMouse.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_MOUSE_H
 
 
-class MMouse
+class M_GUI_EXPORT MMouse
 {
 public:
 
Index: trunk/dev/MSDK/MGui/Includes/WIN32/MWin32Window.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/WIN32/MWin32Window.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/WIN32/MWin32Window.h	(working copy)
@@ -36,7 +36,7 @@
 #include <list>
 
 
-class MWindow
+class M_GUI_EXPORT MWindow
 {
 private:
 
@@ -123,6 +123,8 @@
 	const char * getTempDirectory(void);
 	const char * getCurrentDirectory(void);
 	inline const char * getWorkingDirectory(void){ return m_workingDirectory; }
+	const char* getUserDirectory(void);
+	const char* getSystemDirectory(void);
 
 	// joysticks
 	MJoystick * getJoystick1(void){ return &m_joysticks[0]; }
Index: trunk/dev/MSDK/MGui/Includes/X11/MX11Window.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/X11/MX11Window.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/X11/MX11Window.h	(working copy)
@@ -124,6 +124,8 @@
 	const char * getTempDirectory(void);
 	const char * getCurrentDirectory(void);
 	inline const char * getWorkingDirectory(void){ return m_workingDirectory; }
+	const char* getUserDirectory(void);
+	const char* getSystemDirectory(void);
 
 	// joysticks
 	MJoystick * getJoystick1(void){ return &m_joysticks[0]; }
Index: trunk/dev/MSDK/MGui/Includes/MWindow.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MWindow.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MWindow.h	(working copy)
@@ -31,10 +31,11 @@
 #ifndef _M_WINDOW_H
 #define _M_WINDOW_H
 
-#include <MWinEvents.h>
-#include <MMouse.h>
-#include <MKeyboard.h>
-#include <MJoystick.h>
+#include "MWinEvents.h"
+#include "MGui.h"
+#include "MMouse.h"
+#include "MKeyboard.h"
+#include "MJoystick.h"
 
 #ifdef WIN32
 	#include "WIN32/MWin32Window.h"
Index: trunk/dev/MSDK/MGui/Includes/MGui2d.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGui2d.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGui2d.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI2D_H
 
 
-class MGui2d
+class M_GUI_EXPORT MGui2d
 {
 public:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiButton.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiButton.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiButton.h	(working copy)
@@ -39,7 +39,7 @@
 	MGUI_BUTTON_GROUP,
 };
 
-class MGuiButton : public MGui2d
+class M_GUI_EXPORT MGuiButton : public MGui2d
 {
 private:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiImage.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiImage.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiImage.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI_IMAGE_H
 
 
-class MGuiImage : public MGui2d
+class M_GUI_EXPORT MGuiImage : public MGui2d
 {
 public:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiText.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiText.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiText.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI_TEXT_H
 
 
-class MGuiText : public MGui2d
+class M_GUI_EXPORT MGuiText : public MGui2d
 {
 private:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiTextureFont.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiTextureFont.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiTextureFont.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI_TEXTURE_FONT_H
 
 
-class MGuiTextureFont
+class M_GUI_EXPORT MGuiTextureFont
 {
 private:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiEditText.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiEditText.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiEditText.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI_EDIT_TEXT_H
 
 
-class MGuiEditText : public MGui2d
+class M_GUI_EXPORT MGuiEditText : public MGui2d
 {
 private:
 
Index: trunk/dev/MSDK/MGui/Includes/MJoystick.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MJoystick.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MJoystick.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_JOYSTICK_H
 
 
-class MJoystick
+class M_GUI_EXPORT MJoystick
 {
 public:
 
Index: trunk/dev/MSDK/MGui/Includes/MKeyboard.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MKeyboard.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MKeyboard.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_KEYBOARD_H
 
 
-class MKeyboard
+class M_GUI_EXPORT MKeyboard
 {
 protected:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiSlide.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiSlide.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiSlide.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI_SLIDE_H
 
 
-class MGuiSlide : public MGui2d
+class M_GUI_EXPORT MGuiSlide : public MGui2d
 {
 private:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiMenu.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiMenu.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiMenu.h	(working copy)
@@ -32,7 +32,7 @@
 #define _M_GUI_MENU_H
 
 
-class MGuiMenu : public MGui2d
+class M_GUI_EXPORT MGuiMenu : public MGui2d
 {
 private:
 
Index: trunk/dev/MSDK/MGui/Includes/MGuiEvents.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGuiEvents.h	(revision 126)
+++ trunk/dev/MSDK/MGui/Includes/MGuiEvents.h	(working copy)
@@ -44,7 +44,7 @@
 };
 
 // MWinEvent structure
-struct MGuiEvent
+struct M_GUI_EXPORT MGuiEvent
 {
 	MGUI_EVENT_TYPE type;
     int data[2];
Index: trunk/dev/MSDK/MGui/Sources/MGui.cpp
===================================================================
--- trunk/dev/MSDK/MGui/Sources/MGui.cpp	(revision 126)
+++ trunk/dev/MSDK/MGui/Sources/MGui.cpp	(working copy)
@@ -28,7 +28,7 @@
 //========================================================================
 
 
-#include <MLoaders/MDevILLoader.h>
+//#include <MLoaders/MDevILLoader.h>
 #include "../Includes/MGui.h"
 
 
@@ -49,7 +49,14 @@
 	render->loadIdentity();
 }
 
+imageLoadFunc MImageLoadFunc;
 
+void setImageLoader(imageLoadFunc func)
+{
+  MImageLoadFunc = func;
+}
+
+
 // MGui
 MGui::MGui(void):
 m_render(NULL)
@@ -108,7 +115,8 @@
 	}
 
 	MImage image;
-	if(M_loadImage(filename, &image))
+	
+	if(m_imageLoader.loadData(filename, &image))
 	{
 		MGuiTexture * texture = new MGuiTexture();
 
Index: trunk/dev/MSDK/MGui/Sources/MMouse.cpp
===================================================================
--- trunk/dev/MSDK/MGui/Sources/MMouse.cpp	(revision 126)
+++ trunk/dev/MSDK/MGui/Sources/MMouse.cpp	(working copy)
@@ -28,6 +28,7 @@
 //========================================================================
 
 
+#include "../Includes/MGui.h"
 #include "../Includes/MMouse.h"
 
 
Index: trunk/dev/MSDK/MGui/Sources/MJoystick.cpp
===================================================================
--- trunk/dev/MSDK/MGui/Sources/MJoystick.cpp	(revision 126)
+++ trunk/dev/MSDK/MGui/Sources/MJoystick.cpp	(working copy)
@@ -28,6 +28,7 @@
 //========================================================================
 
 
+#include "../Includes/MGui.h"
 #include "../Includes/MJoystick.h"
 
 
Index: trunk/dev/MSDK/MGui/Sources/MKeyboard.cpp
===================================================================
--- trunk/dev/MSDK/MGui/Sources/MKeyboard.cpp	(revision 126)
+++ trunk/dev/MSDK/MGui/Sources/MKeyboard.cpp	(working copy)
@@ -28,4 +28,5 @@
 //========================================================================
 
 
+#include "../Includes/MGui.h"
 #include "../Includes/MKeyboard.h"
\ No newline at end of file
Index: trunk/dev/MSDK/MGui/Sources/X11/MX11Window.cpp
===================================================================
--- trunk/dev/MSDK/MGui/Sources/X11/MX11Window.cpp	(revision 126)
+++ trunk/dev/MSDK/MGui/Sources/X11/MX11Window.cpp	(working copy)
@@ -30,6 +30,7 @@
 //========================================================================
 
 
+#include "../../Includes/MGui.h"
 #include "../../Includes/MWindow.h"
 
 #include <stdlib.h>
@@ -39,12 +40,12 @@
 #include <X11/extensions/xf86vmode.h>
 #include <GL/gl.h>
 #include <GL/glx.h>
+#include <unistd.h>
 
 #ifndef WIN32
         #include <unistd.h>
 #endif
 
-
 // start time
 static struct timeval startTime;
 
@@ -254,6 +255,20 @@
 	return currentDirectory;
 }
 
+const char* MWindow::getUserDirectory(void)
+{
+  static char dir[0xff];
+  snprintf(dir, 0xff, "%s/.Maratis/", getenv("HOME"));
+  return dir;
+}
+
+const char* MWindow::getSystemDirectory(void)
+{
+  static char dir[0xff];
+  snprintf(dir, 0xff, "%s/", getenv("MSDKDIR"));
+  return dir;
+}
+
 void MWindow::setCursorPos(int x, int y)
 {
 	XWarpPointer(display, None, window, 0, 0, 0, 0, x, y);
Index: trunk/dev/MSDK/MEngine/Sources/MArmature.cpp
===================================================================
--- trunk/dev/MSDK/MEngine/Sources/MArmature.cpp	(revision 126)
+++ trunk/dev/MSDK/MEngine/Sources/MArmature.cpp	(working copy)
@@ -45,6 +45,7 @@
 
 void MArmature::clearBones(void)
 {
+        M_PROFILE_SCOPE("MArmature::clearBones");
 	unsigned int i;
 	for(i=0; i<m_bonesNumber; i++)
 		SAFE_DELETE(m_bones[i]);
@@ -54,6 +55,7 @@
 
 void MArmature::allocBones(unsigned int size)
 {
+        M_PROFILE_SCOPE("MArmature::allocBones");
 	clearBones();
 	if(size == 0)
 		return;
@@ -63,6 +65,7 @@
 
 MOBone * MArmature::addNewBone(void)
 {
+        M_PROFILE_SCOPE("MArmature::addNewBone");
 	MOBone * bone = new MOBone();
 	m_bones[m_bonesNumber] = bone;
 	m_bonesNumber++;
@@ -71,6 +74,7 @@
 
 MOBone * MArmature::getBoneByName(const char * name)
 {
+        M_PROFILE_SCOPE("MArmature::getBoneByName");
 	unsigned int i;
 	for(i=0; i<m_bonesNumber; i++) // scan bones
 	{
@@ -84,6 +88,7 @@
 
 bool MArmature::getBoneId(const char * boneName, unsigned int * bId)
 {
+        M_PROFILE_SCOPE("MArmature::getBoneId");
 	unsigned int i;
 
 	// return if there is no bones
@@ -145,4 +150,4 @@
 			bone->processChildsLinking();
 		}
 	}
-}
\ No newline at end of file
+}
Index: trunk/dev/MSDK/MEngine/Sources/MEngine.cpp
===================================================================
--- trunk/dev/MSDK/MEngine/Sources/MEngine.cpp	(revision 126)
+++ trunk/dev/MSDK/MEngine/Sources/MEngine.cpp	(working copy)
@@ -87,6 +87,11 @@
 	m_systemContext = systemContext;
 }
 
+void MEngine::setProfilerContext(MProfilerContext * profilerContext)
+{
+	m_profilerContext = profilerContext; 
+}
+
 void MEngine::setPackageManager(MPackageManager * packageManager)
 {
 	m_packageManager = packageManager;
Index: trunk/dev/MSDK/MEngine/Includes/MEngine.h
===================================================================
--- trunk/dev/MSDK/MEngine/Includes/MEngine.h	(revision 126)
+++ trunk/dev/MSDK/MEngine/Includes/MEngine.h	(working copy)
@@ -49,6 +49,8 @@
 
 #endif
 
+// for plugin compatability checking
+#define MPLUGIN_AVAILABLE
 
 // object3d type
 #define M_OBJECT3D			0
@@ -142,6 +144,8 @@
 #include "MOEntity.h"
 #include "MOText.h"
 
+#include "MProfiler.h"
+
 #include "MScene.h"
 #include "MLevel.h"
 #include "MGame.h"
@@ -169,6 +173,7 @@
 	MScriptContext * m_scriptContext;
 	MInputContext * m_inputContext;
 	MSystemContext * m_systemContext;
+	MProfilerContext * m_profilerContext;
 
 	// data loaders
 	MDataLoader m_fontLoader;
@@ -218,6 +223,7 @@
 	void setScriptContext(MScriptContext * scriptContext);
 	void setInputContext(MInputContext * inputContext);
 	void setSystemContext(MSystemContext * systemContext);
+	void setProfilerContext(MProfilerContext * profilerContext);
 
 	// get contexts
 	inline MSoundContext * getSoundContext(void){ return m_soundContext; }
@@ -226,6 +232,7 @@
 	inline MScriptContext * getScriptContext(void){ return m_scriptContext; }
 	inline MInputContext * getInputContext(void){ return m_inputContext; }
 	inline MSystemContext * getSystemContext(void){ return m_systemContext; }
+	inline MProfilerContext * getProfilerContext(void){ return m_profilerContext; }
 
 	// data loaders
 	MDataLoader * getFontLoader(void){ return &m_fontLoader; }
Index: trunk/dev/MSDK/MCore/Includes/MScriptContext.h
===================================================================
--- trunk/dev/MSDK/MCore/Includes/MScriptContext.h	(revision 126)
+++ trunk/dev/MSDK/MCore/Includes/MScriptContext.h	(working copy)
@@ -41,6 +41,7 @@
 
 	// run script
 	virtual void runScript(const char * filename) = 0;
+	virtual bool addScript(const char * filename) = 0;
 
 	// call function
 	virtual bool startCallFunction(const char* name) = 0;
Index: trunk/dev/MSDK/MCore/Includes/MSystemContext.h
===================================================================
--- trunk/dev/MSDK/MCore/Includes/MSystemContext.h	(revision 126)
+++ trunk/dev/MSDK/MCore/Includes/MSystemContext.h	(working copy)
@@ -50,6 +50,10 @@
 
 	// system tick
 	virtual unsigned long getSystemTick(void) = 0;
+	
+	// Store directories
+	virtual const char* getUserDirectory(void) = 0;
+	virtual const char* getSystemDirectory(void) = 0;
 };
 
-#endif
\ No newline at end of file
+#endif
Index: trunk/dev/MSDK/MCore/Includes/MRenderingContext.h
===================================================================
--- trunk/dev/MSDK/MCore/Includes/MRenderingContext.h	(revision 126)
+++ trunk/dev/MSDK/MCore/Includes/MRenderingContext.h	(working copy)
@@ -389,6 +389,9 @@
 	virtual void enableBlending(void) = 0;
 	virtual void disableBlending(void) = 0;
 	virtual void setBlendingMode(M_BLENDING_MODES mode) = 0;
+
+	// points
+	virtual void setPointSize(float min, float max, float threshold) = 0;
 };
 
 #endif
Index: trunk/dev/MSDK/MCore/Includes/MPhysicsContext.h
===================================================================
--- trunk/dev/MSDK/MCore/Includes/MPhysicsContext.h	(revision 126)
+++ trunk/dev/MSDK/MCore/Includes/MPhysicsContext.h	(working copy)
@@ -50,6 +50,7 @@
 
 	// world
 	virtual void setWorldGravity(const MVector3 & gravity) = 0;
+	virtual MVector3 getWorldGravity() = 0;
 
 	// create object
 	virtual void createGhost(unsigned int * objectId, unsigned int shapeId, const MVector3 & position, const MQuaternion & rotation) = 0;
@@ -118,4 +119,4 @@
 	virtual void deleteConstraint(unsigned int * constraintId) = 0;
 };
 
-#endif
\ No newline at end of file
+#endif
Index: trunk/dev/MSDK/MCore/Sources/MFileTools.cpp
===================================================================
--- trunk/dev/MSDK/MCore/Sources/MFileTools.cpp	(revision 126)
+++ trunk/dev/MSDK/MCore/Sources/MFileTools.cpp	(working copy)
@@ -301,10 +301,10 @@
 
 MFile* M_fopen(const char* path, const char* mode)
 {
-	MFile* rtn;
+	MFile* rtn = NULL;
 	if(s_fileOpenHook)
 		rtn = s_fileOpenHook->open(path, mode);
-	else
+	if(rtn == NULL)
 		rtn = MStdFile::getNew(path, mode);
 	
 	// if all loading failed, return 0
Index: trunk/dev/MSDK/MCore/Sources/MString.cpp
===================================================================
--- trunk/dev/MSDK/MCore/Sources/MString.cpp	(revision 126)
+++ trunk/dev/MSDK/MCore/Sources/MString.cpp	(working copy)
@@ -60,7 +60,7 @@
 {
 	SAFE_DELETE_ARRAY(m_data);
 	m_data = new char[8];
-	m_data[0] = NULL;
+	m_data[0] = (char)NULL;
 }
 
 void MString::set(const char * data)
@@ -80,5 +80,5 @@
 		}
 	}
 	
-	m_data[0] = NULL;
-}
\ No newline at end of file
+	m_data[0] = (char)NULL;
+}
Index: trunk/dev/Maratis/Common/MFileManager/MPackageManagerNPK.cpp
===================================================================
--- trunk/dev/Maratis/Common/MFileManager/MPackageManagerNPK.cpp	(revision 126)
+++ trunk/dev/Maratis/Common/MFileManager/MPackageManagerNPK.cpp	(working copy)
@@ -34,7 +34,7 @@
 #include <npk.h>
 #include <npk_dev.h>
 
-#define M_MAX_PACKAGES 1
+#define M_MAX_PACKAGES 10
 
 int teakey[4] = { 0,0,0,0 };
 
@@ -145,11 +145,14 @@
 	
 	if(strstr(mode, "w") != 0)
 		return MStdFile::getNew(path, mode);
-	
+
 	// look within the package for a file with the requested name
 	if(MPackageEnt ent = engine->getPackageManager()->findEntity(localFilename))
 		return MPackageFile::getNew(ent);
-	
+
+	if(previousHook)
+	    return previousHook->open(path, mode);
+
 	// give up, just look for a new file using stdio
 	return MStdFile::getNew(path, mode);
 }
@@ -180,9 +183,19 @@
 
 void MPackageManagerNPK::init()
 {
+    npk_io_open_func((npk_open_func)M_fopen);
+    npk_io_close_func((npk_close_func)M_fclose);
+    npk_io_read_func((npk_read_func)M_fread);
+    npk_io_write_func((npk_write_func)M_fwrite);
+    npk_io_seek_func((npk_seek_func)M_fseek);
+    npk_io_tell_func((npk_tell_func)M_ftell);
+    npk_io_rewind_func((npk_rewind_func)M_rewind);
+
+
 	if(! m_fileOpenHook)
 	{
 		m_fileOpenHook = new MPackageFileOpenHook;
+		m_fileOpenHook->previousHook = M_getFileOpenHook();
 		
 		MPackageNPK** packages = new MPackageNPK*[M_MAX_PACKAGES];
 		m_packages = (MPackage*)packages;
@@ -200,7 +213,7 @@
 	if(m_fileOpenHook)
 	{
 		if(M_getFileOpenHook() == m_fileOpenHook)
-			M_registerFileOpenHook(0);
+			M_registerFileOpenHook(m_fileOpenHook->previousHook);
 		SAFE_DELETE(m_fileOpenHook);
 	}
 	
@@ -350,4 +363,4 @@
 	// loaded the package, now save it for later access
 	m_packages[pkgNum] = pack;
 	return pack;
-}
\ No newline at end of file
+}
Index: trunk/dev/Maratis/Common/MFileManager/MPackageManagerNPK.h
===================================================================
--- trunk/dev/Maratis/Common/MFileManager/MPackageManagerNPK.h	(revision 126)
+++ trunk/dev/Maratis/Common/MFileManager/MPackageManagerNPK.h	(working copy)
@@ -34,7 +34,10 @@
 class MPackageFileOpenHook : public MFileOpenHook
 {
 public:
+	MPackageFileOpenHook() 
+	    : previousHook(0) {}
 	MFile* open(const char* path, const char* mode);
+	MFileOpenHook* previousHook;
 };
 
 /*--------------------------------------------------------------------------------
@@ -75,4 +78,4 @@
 	MPackage	mountPackage(MPackage package);
 };
 
-#endif
\ No newline at end of file
+#endif
Index: trunk/dev/Maratis/Common/MPlugin/MPlugin.cpp
===================================================================
--- trunk/dev/Maratis/Common/MPlugin/MPlugin.cpp	(revision 126)
+++ trunk/dev/Maratis/Common/MPlugin/MPlugin.cpp	(working copy)
@@ -30,64 +30,145 @@
 
 #include <MEngine.h>
 #include "MPlugin.h"
+#include <MWindow.h>
+#include <MFileTools.h>
 
+#include <stdio.h>
 
-typedef void * (*FunctionPtr)();
+#ifndef MPLUGIN_DYNAMIC
+#include <map>
+typedef struct _plugin
+{
+  FunctionPtr Start;
+  FunctionPtr End;
+  _plugin() : Start(0), End(0) {}
+  _plugin(FunctionPtr s, FunctionPtr e) : Start(s), End(e) {}
+} plugin;
 
+typedef std::map<const char*, plugin> pluginmap;
+typedef pluginmap::iterator pluginiter;
+pluginmap g_plugindefs;
+
+void AddPluginFunctions(const char* pluginName, FunctionPtr start, FunctionPtr end)
+{
+  plugin p(start, end);
+  g_plugindefs[pluginName] = p;
+}
+#endif
+
+
 MPlugin::MPlugin(void)
 {
+#ifdef MPLUGIN_DYNAMIC
 	m_library = NULL;
+#else
+	Start= 0;
+	End = 0;
+#endif
+	m_loaded = false;
 }
 
 MPlugin::~MPlugin(void)
 {
-	if(m_library)
-	{	
-#ifdef WIN32
-		
-		FunctionPtr function = reinterpret_cast<FunctionPtr>(GetProcAddress(m_library, "EndPlugin"));
-		if(function)
-			 function();
-		FreeLibrary(m_library);
-		
-#else
-		
-		FunctionPtr function = (FunctionPtr)dlsym(m_library, "EndPlugin");
-		if(function)
-			function();
-		dlclose(m_library);
-		
+#ifdef MPLUGIN_DYNAMIC
+    if(m_library)
+    {
+#    ifdef WIN32
+	
+	FunctionPtr function = reinterpret_cast<FunctionPtr>(GetProcAddress(m_library, "EndPlugin"));
+	if(function)
+	    function();
+	FreeLibrary(m_library);
+	
+#    else
+	
+	FunctionPtr function = (FunctionPtr)dlsym(m_library, "EndPlugin");
+	if(function)
+	    function();
+	dlclose(m_library);
+	
+#    endif
+    }
+#else		
+    if(End)
+	End();
 #endif
-	}
 }
 
 void MPlugin::load(const char * filename)
 {
-#ifdef WIN32
+#ifdef MPLUGIN_DYNAMIC
+
+
+	char file[256];
+	MWindow* window = MWindow::getInstance();
+
+	char dirs[3][256];
+	snprintf(dirs[0], 256, window->getWorkingDirectory());
+	snprintf(dirs[1], 256, "%s/Plugins", window->getUserDirectory());
+	snprintf(dirs[2], 256, "%s/Plugins", window->getSystemDirectory());
 	
-    m_library = LoadLibrary(filename);
-    if(! m_library)
-		return;
+	for(int i = 0; i < 3; ++i)
+	{
+#    ifdef WIN32
+	  getGlobalFilename(file, dirs[i], (string(filename) + ".dll").c_str());
+#    elseif __APPLE__
+	  getGlobalFilename(file, dirs[i], (string(filename) + ".dylib").c_str());
+#    else // just assume a linux based os
+	  getGlobalFilename(file, dirs[i], (string(filename) + ".so").c_str());
+#    endif
 
+	  if(isFileExist(file))
+	     break;
+	}
+
+#    ifdef WIN32
+    
+    m_library = LoadLibrary(file);
+    if(! m_library);
+    return;
+    
     FunctionPtr function = reinterpret_cast<FunctionPtr>(GetProcAddress(m_library, "StartPlugin"));
     if(! function)
-		return;
+	return;
 
-	m_filename = filename;
+    m_filename = filename;
+    function();	
+    m_loaded = true;
+
+#    else
+    
+    m_library = dlopen(file, RTLD_LAZY);
+    if(! m_library)
+    {
+	printf("%s\n", dlerror());
+	return;
+    }
+    
+    FunctionPtr function = (FunctionPtr)dlsym(m_library, "StartPlugin");
+    if(! function)
+    {
+	printf(dlerror());
+	return;
+    }
+    
+    m_filename = filename;
     function();
-	
+    m_loaded = true;
+    
+#    endif
 #else
-	
-	m_library = dlopen(filename, RTLD_LAZY);
-	if(! m_library)
-		return;
-	
-	FunctionPtr function = (FunctionPtr)dlsym(m_library, "StartPlugin");
-	if(! function)
-		return;
-	
-	m_filename = filename;
-    function();
-
+    // still need to cut up the filename... or something
+    pluginiter iplug = g_plugindefs.find(filename);
+    if(iplug != g_plugindefs.end())
+    {
+	Start = iplug->second.Start;
+	End = iplug->second.End;
+    }
+    if(Start)
+    {
+        Start();
+	m_loaded = true;
+    }
 #endif
-}
\ No newline at end of file
+}
Index: trunk/dev/Maratis/Common/MPlugin/MPlugin.h
===================================================================
--- trunk/dev/Maratis/Common/MPlugin/MPlugin.h	(revision 126)
+++ trunk/dev/Maratis/Common/MPlugin/MPlugin.h	(working copy)
@@ -31,33 +31,111 @@
 #ifndef _M_PLUGIN_H
 #define _M_PLUGIN_H
 
-#ifdef WIN32
-#include <windows.h>
-#else
-#include <dlfcn.h>
-#endif
+#ifdef MPLUGIN_DYNAMIC
+#  ifdef WIN32
+#    include <windows.h>
+#    define MPLUGIN_EXPORT __declspec(dllexport)
+#  else
+// automagically exported
+#    define MPLUGIN_EXPORT
+#    include <dlfcn.h>
+#  endif /*WIN32*/
+#endif/*MPLUGIN_DYNAMIC*/
 
-class MPlugin
+typedef void * (*FunctionPtr)();
+
+class M_ENGINE_EXPORT MPlugin
 {
 public :
 
 	MPlugin(void);
 	~MPlugin(void);
 
-private :
+protected :
 
 	string m_filename;
-	
-#ifdef WIN32
-    HMODULE m_library;
+
+#ifdef MPLUGIN_DYNAMIC	
+#    ifdef WIN32
+	HMODULE m_library;
+#    else
+	void * m_library;
+#    endif
 #else
-	void * m_library;
+        FunctionPtr Start;
+        FunctionPtr End;
+
 #endif
-
+	bool m_loaded;
 public:
 	
 	void load(const char * filename);
 	inline const char * getFilename(void){ return m_filename.c_str(); }
+	inline bool isLoaded(void) { return m_loaded; }
 };
 
-#endif
\ No newline at end of file
+// Some nasty macros to help making plugins for both systems that can dynamically
+// load libraries (ie. sensible systems) and for annoying systems like iOS
+// where we can't have shared objects.
+//
+// to use, in the plugin somewhere do as follows:
+//------------AwesomePlugin.h---------------------------------------------------
+// #include <MPlugin.h>
+// 
+// MPLUGIN_DECLARE(MyAwesomePlugin);
+//------------AwesomePlugin.cpp-------------------------------------------------
+// #include "AwesomePlugin.h"
+//
+// MPLUGIN_START_IMPLEMENT(MyAwesomePlugin)
+// {
+//   // this is where you do your code
+// }
+//
+// MPLUGIN_END_IMPLEMENT(MyAwesomePlugin)
+// {
+//   // cleanup here
+// }
+//
+// Everything else should be taken care of
+
+#ifdef MPLUGIN_DYNAMIC
+#    define MPLUGIN_DECLARE(name)		\
+  extern "C" {					\
+  MPLUGIN_EXPORT void StartPlugin();		\
+  MPLUGIN_EXPORT void EndPlugin();		\
+  }
+
+#    define MPLUGIN_START_IMPLEMENT(name)	\
+  void StartPlugin()
+
+#    define MPLUGIN_END_IMPLEMENT(name)		\
+  void EndPlugin()
+#else
+#    define MPLUGIN_DECLARE(name)			\
+  void StartPlugin##name();				\
+  void EndPlugin##name();				\
+  class Plugin##name##AutoStart				\
+  {							\
+  public:						\
+    Plugin##name##AutoStart();				\
+  }							\
+  extern Plugin##name##AutoStart s_##name##AutoStarter;
+
+#   define MPLUGIN_START_IMPLEMENT(name)				\
+  Plugin##name##AutoStart s_##name##AutoStarter;			\
+  Plugin##name##AutoStart::Plugin##name##AutoStart()			\
+  {									\
+    AddPluginFunctions(#name, &StartPlugin##name, &EndPlugin##name);	\
+  }									\
+  void StartPlugin##name()
+
+#   define MPLUGIN_END_IMPLEMENT(name)		\
+  void EndPlugin##name()
+#endif/*MPLUGIN_DYNAMIC*/
+
+// don't worry about this:
+#ifndef MPLUGIN_DYNAMIC
+void AddPluginFunctions(const char* pluginName, FunctionPtr start, FunctionPtr end);
+#endif
+
+#endif
Index: trunk/dev/Maratis/Common/MScript/MScript.h
===================================================================
--- trunk/dev/Maratis/Common/MScript/MScript.h	(revision 126)
+++ trunk/dev/Maratis/Common/MScript/MScript.h	(working copy)
@@ -60,6 +60,7 @@
 
 	// run script
 	void runScript(const char * filename);
+	bool addScript(const char * filename);
 
 	// call function
 	bool startCallFunction(const char* name);
Index: trunk/dev/Maratis/Common/MScript/MScript.cpp
===================================================================
--- trunk/dev/Maratis/Common/MScript/MScript.cpp	(revision 126)
+++ trunk/dev/Maratis/Common/MScript/MScript.cpp	(working copy)
@@ -30,10 +30,12 @@
 
 #include "MScript.h"
 
+#include <list>
+#include <string>
 
 char g_currentDirectory[256] = "";
+std::list<std::string> g_loadPath;
 
-
 /////////////////////////////////////////////////////////////////////////////////////////////////////////
 // Some frequently used macros
 /////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -2204,31 +2206,78 @@
 	return 0;
 }
 
+char* getFile(const char* filename)
+{
+    char* rtn = NULL;
+    for(std::list<std::string>::iterator iPath = g_loadPath.begin(); iPath != g_loadPath.end(); ++iPath)
+    {
+	// make global filename
+	char globalFilename[256];
+	getGlobalFilename(globalFilename, iPath->c_str(), filename);
+
+	if(isFileExist(globalFilename))
+	    rtn = readTextFile(globalFilename);
+
+	if(rtn)
+	{
+	    // do file and update current directory
+	    getRepertory(g_currentDirectory, globalFilename);
+	    g_loadPath.push_back(g_currentDirectory);
+	    return rtn;
+	}
+    }
+}
+
 int doFile(lua_State * L)
 {
 	if(! isFunctionOk(L, "doFile", 1))
-		return 0;
-
+	    return 0;
+	    
 	const char * filename = lua_tostring(L, 1);
-
-	// save current directory
-	char current[256];
-	strcpy(current, g_currentDirectory);
 	
-	// make global filename
-	char globalFilename[256];
-	getGlobalFilename(globalFilename, g_currentDirectory, filename);
+	char * text = getFile(filename);
 
-	// do file and update current directory
-	getRepertory(g_currentDirectory, globalFilename);
-	luaL_dofile(L, globalFilename);
+	if(!text) return 0;
 
-	// set back to current
-	strcpy(g_currentDirectory, current);
+	if(luaL_dostring(L, text) != 0)
+	    printf("ERROR lua script: \n %s\n", lua_tostring(L, -1));
+	else
+	    g_loadPath.pop_back();
+
+	SAFE_FREE(text);
+
 	return 0;
 }
 
+// similar to dofile
+// should have lookups, so you don't end up calling twice (not that it matters much)
+// will first look for {param}/__init__.lua and then, failing that, {param}.lua
+int require(lua_State* L)
+{
+    if(!isFunctionOk(L, "require", 1))
+	return 0;
 
+    const char* filename = lua_tostring(L, 1);
+    char init[256];
+    snprintf(init, 256, "%s/__init__.lua", filename);
+    char file[256];
+    snprintf(file, 256, "%s.lua", filename);
+    char* text = getFile(init);
+    if(text == NULL)
+	text = getFile(file);
+
+    if(!text) return 0;
+
+    if(luaL_dostring(L, text) != 0)
+	printf("ERROR lua script: \n %s\n", lua_tostring(L, -1));
+    else
+	g_loadPath.pop_back();
+    SAFE_FREE(text);
+
+    return 0;
+}
+
+
 /////////////////////////////////////////////////////////////////////////////////////////////////////////
 // Init
 /////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -2236,7 +2285,7 @@
 MScript::MScript(void):
 m_isRunning(false)
 {
-	init();
+//    init();
 }
 
 MScript::~MScript(void)
@@ -2248,6 +2297,8 @@
 {
 	// create context
 	m_state = lua_open();
+	g_loadPath.clear();
+	g_loadPath.push_back("");
 
 	luaopen_base(m_state);
 	luaopen_table(m_state);
@@ -2364,6 +2415,7 @@
 
 	// dofile
 	lua_register(m_state, "dofile", doFile);
+	lua_register(m_state, "require", require);
 
 	// quit
 	lua_register(m_state, "quit", quit);
@@ -2404,9 +2456,10 @@
 	if(m_isRunning)
 	{
 		clear();
-		init();
+		//	init();
 	}
-
+	init();
+	
 	if(! filename)
 	{
 		m_isRunning = false;
@@ -2430,6 +2483,7 @@
 	
 	// current directory
 	getRepertory(g_currentDirectory, filename);
+	g_loadPath.push_back(g_currentDirectory);
 	
 	// do string
 	if(luaL_dostring(m_state, text) != 0)
@@ -2445,6 +2499,34 @@
 	m_isRunning = true;
 }
 
+bool MScript::addScript(const char* filename)
+{
+    // save current directory
+    char current[256];
+    strcpy(current, g_currentDirectory);
+    
+    // make global filename
+    char globalFilename[256];
+    getGlobalFilename(globalFilename, g_currentDirectory, filename);
+    
+    // do file and update current directory
+    getRepertory(g_currentDirectory, globalFilename);
+
+    g_loadPath.push_back(g_currentDirectory);
+    char * text = readTextFile(globalFilename);
+    bool rtn = luaL_dostring(m_state, text) == 0;
+
+    if(!rtn)
+	printf("ERROR lua script: \n %s\n", lua_tostring(m_state, -1));
+    
+    // set back to current
+    g_loadPath.pop_back();
+    strcpy(g_currentDirectory, current);
+    m_isRunning = m_isRunning || rtn;
+    SAFE_FREE(text);
+    return rtn;
+}
+
 bool MScript::startCallFunction(const char* name)
 {
 	if(m_isRunning)
@@ -2477,8 +2559,10 @@
 		endCallFunction();
 }
 
-void MScript::addFunction(const char * name, int (*function)(void)){
-	m_functions[name] = function;
+void MScript::addFunction(const char * name, int (*_function)(void)){
+	m_functions[name] = _function;
+	if(m_isRunning)
+	    lua_register(m_state, name, function);
 }
 
 unsigned int MScript::getArgsNumber(void){
@@ -2571,4 +2655,4 @@
 
 void MScript::pushPointer(void* value){
 	lua_pushinteger(m_state, (lua_Integer)value);
-}
\ No newline at end of file
+}
Index: trunk/dev/Maratis/Common/MContexts/MGLContext.cpp
===================================================================
--- trunk/dev/Maratis/Common/MContexts/MGLContext.cpp	(revision 126)
+++ trunk/dev/Maratis/Common/MContexts/MGLContext.cpp	(working copy)
@@ -220,6 +220,9 @@
 
 	// anisotropic filtering
 	glGetFloatv(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, &maxAnisotropy);
+
+	glEnable(GL_POINT_SPRITE);
+	glTexEnvi(GL_POINT_SPRITE, GL_COORD_REPLACE, GL_TRUE);
 }
 
 MGLContext::~MGLContext(void)
@@ -1188,3 +1191,13 @@
 		break;
 	}
 }
+
+void MGLContext::setPointSize(float min, float max, float threshold)
+{
+	//glPointParameterf(GL_POINT_FADE_THRESHOLD_SIZE, threshold);
+	glPointSize(max);
+	glPointParameterf(GL_POINT_SIZE_MIN, min);
+	glPointParameterf(GL_POINT_SIZE_MAX, max);
+	GLfloat attn[] = { 0.0f, 0.0f, 0.02f };
+	glPointParameterfv(GL_POINT_DISTANCE_ATTENUATION, attn);
+}
Index: trunk/dev/Maratis/Common/MContexts/MWinContext.h
===================================================================
--- trunk/dev/Maratis/Common/MContexts/MWinContext.h	(revision 126)
+++ trunk/dev/Maratis/Common/MContexts/MWinContext.h	(working copy)
@@ -51,6 +51,10 @@
 
 	// system tick
 	unsigned long getSystemTick(void);
+	
+	// plugin directories
+	const char* getUserDirectory(void);
+	const char* getSystemDirectory(void);
 };
 
-#endif
\ No newline at end of file
+#endif
Index: trunk/dev/Maratis/Common/MContexts/MGLContext.h
===================================================================
--- trunk/dev/Maratis/Common/MContexts/MGLContext.h	(revision 126)
+++ trunk/dev/Maratis/Common/MContexts/MGLContext.h	(working copy)
@@ -248,6 +248,9 @@
 	void enableBlending(void);
 	void disableBlending(void);
 	void setBlendingMode(M_BLENDING_MODES mode);
+
+	// points
+	void setPointSize(float min, float max, float threshold);
 };
 
 #endif
Index: trunk/dev/Maratis/Common/MContexts/MBulletContext.cpp
===================================================================
--- trunk/dev/Maratis/Common/MContexts/MBulletContext.cpp	(revision 126)
+++ trunk/dev/Maratis/Common/MContexts/MBulletContext.cpp	(working copy)
@@ -129,6 +129,14 @@
 	m_dynamicsWorld->setGravity(btVector3(gravity.x, gravity.y, gravity.z));
 }
 
+MVector3 MBulletContext::getWorldGravity()
+{
+	if(m_dynamicsWorld == NULL)
+		return MVector3(0.0f, 0.0f, 0.0f);
+	btVector3 gravity = m_dynamicsWorld->getGravity();
+	return MVector3(gravity.x(), gravity.y(), gravity.z());
+}
+
 // create object
 void MBulletContext::createGhost(unsigned int * objectId, unsigned int shapeId, const MVector3 & position, const MQuaternion & rotation)
 {
Index: trunk/dev/Maratis/Common/MContexts/MBulletContext.h
===================================================================
--- trunk/dev/Maratis/Common/MContexts/MBulletContext.h	(revision 126)
+++ trunk/dev/Maratis/Common/MContexts/MBulletContext.h	(working copy)
@@ -79,6 +79,7 @@
 
 	// world gravity
 	void setWorldGravity(const MVector3 & gravity);
+	MVector3 getWorldGravity();
 
 	// create object
 	void createGhost(unsigned int * objectId, unsigned int shapeId, const MVector3 & position, const MQuaternion & rotation);
@@ -147,4 +148,4 @@
 	void deleteConstraint(unsigned int * constraintId);
 };
 
-#endif
\ No newline at end of file
+#endif
Index: trunk/dev/Maratis/Common/MContexts/MWinContext.cpp
===================================================================
--- trunk/dev/Maratis/Common/MContexts/MWinContext.cpp	(revision 126)
+++ trunk/dev/Maratis/Common/MContexts/MWinContext.cpp	(working copy)
@@ -60,3 +60,16 @@
 	MWindow * window = MWindow::getInstance();
 	return window->getSystemTick();
 }
+	
+// plugin directories
+const char* MWinContext::getUserDirectory(void)
+{
+  MWindow * window = MWindow::getInstance();
+  return window->getUserDirectory();
+}
+
+const char* MWinContext::getSystemDirectory(void)
+{
+  MWindow * window = MWindow::getInstance();
+  return window->getSystemDirectory();
+}
