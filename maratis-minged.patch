Index: trunk/dev/MSDK/MGui/Includes/MGui.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MGui.h	(revision 102)
+++ trunk/dev/MSDK/MGui/Includes/MGui.h	(working copy)
@@ -32,6 +32,25 @@
 #define _M_GUI_H
 
 
+#ifdef WIN32
+
+	// M_GUI_EXPORT
+	#if defined(MGUI_DLL)
+		#define M_GUI_EXPORT __declspec( dllexport )
+	#elif defined(MGUI_STATIC)
+		#define M_GUI_EXPORT
+	#else
+		#define M_GUI_EXPORT __declspec( dllimport )
+	#endif
+
+#else
+
+	// M_GUI_EXPORT
+	#define M_GUI_EXPORT
+
+#endif
+
+
 // variable types
 enum M_VAR_TYPE
 {
@@ -70,12 +89,15 @@
 #include "MGuiFileBrowser.h"
 
 
+typedef bool(*imageLoadFunc)(const char*, void*);
+
 // global functions
 void set2dMode(MRenderingContext * render);
+void setImageLoader(imageLoadFunc func);
 
 
 // gui texture
-class MGuiTexture
+class M_GUI_EXPORT MGuiTexture
 {
 public:
 
@@ -84,7 +106,7 @@
 };
 
 // MGui
-class MGui
+class M_GUI_EXPORT MGui
 {
 public:
 
@@ -112,11 +134,15 @@
 	// windows
 	std::vector <MGuiWindow *> m_windows;
 
+	MDataLoader m_imageLoader;
+
 public:
 
 	// rendering context
 	void setRenderingContext(MRenderingContext * render){ m_render = render; }
 	MRenderingContext * getRenderingContext(void){ return m_render; }
+	
+	MDataLoader * getImageLoader(void){ return &m_imageLoader; }
 
 	// windows
 	void unHighLightAllWindows(void);
Index: trunk/dev/MSDK/MGui/Includes/MWindow.h
===================================================================
--- trunk/dev/MSDK/MGui/Includes/MWindow.h	(revision 102)
+++ trunk/dev/MSDK/MGui/Includes/MWindow.h	(working copy)
@@ -31,10 +31,11 @@
 #ifndef _M_WINDOW_H
 #define _M_WINDOW_H
 
-#include <MWinEvents.h>
-#include <MMouse.h>
-#include <MKeyboard.h>
-#include <MJoystick.h>
+#include "MWinEvents.h"
+#include "MGui.h"
+#include "MMouse.h"
+#include "MKeyboard.h"
+#include "MJoystick.h"
 
 #ifdef WIN32
 	#include "WIN32/MWin32Window.h"
Index: trunk/dev/MSDK/MGui/Sources/X11/MX11Window.cpp
===================================================================
--- trunk/dev/MSDK/MGui/Sources/X11/MX11Window.cpp	(revision 102)
+++ trunk/dev/MSDK/MGui/Sources/X11/MX11Window.cpp	(working copy)
@@ -30,6 +30,7 @@
 //========================================================================
 
 
+#include "../../Includes/MGui.h"
 #include "../../Includes/MWindow.h"
 
 #include <stdlib.h>
@@ -39,9 +40,9 @@
 #include <X11/extensions/xf86vmode.h>
 #include <GL/gl.h>
 #include <GL/glx.h>
+#include <unistd.h>
 
 
-
 // start time
 static struct timeval startTime;
 
@@ -442,8 +443,9 @@
 
 				int car = translateChar(&event.xkey);
 
-				if(car == 127 || car == 32 || car == 13 || car == 9) // not return, space, delete etc..
-					break;
+				//if(car == 127 || car == 32 || car == 13 || car == 9) // not return, space, delete etc..
+				if(car == -1)
+				      break;
 
 				mevent.type = MWIN_EVENT_CHAR;
 				mevent.data[0] = car;
Index: trunk/dev/MSDK/MGui/Sources/MGui.cpp
===================================================================
--- trunk/dev/MSDK/MGui/Sources/MGui.cpp	(revision 102)
+++ trunk/dev/MSDK/MGui/Sources/MGui.cpp	(working copy)
@@ -28,7 +28,7 @@
 //========================================================================
 
 
-#include <MLoaders/MDevILLoader.h>
+//#include <MLoaders/MDevILLoader.h>
 #include "../Includes/MGui.h"
 
 
@@ -49,7 +49,14 @@
 	render->loadIdentity();
 }
 
+imageLoadFunc MImageLoadFunc;
 
+void setImageLoader(imageLoadFunc func)
+{
+  MImageLoadFunc = func;
+}
+
+
 // MGui
 MGui::MGui(void):
 m_render(NULL)
@@ -108,7 +115,8 @@
 	}
 
 	MImage image;
-	if(M_loadImage(filename, &image))
+	
+	if(m_imageLoader.loadData(filename, &image))
 	{
 		MGuiTexture * texture = new MGuiTexture();
 
Index: trunk/dev/MSDK/MCore/Sources/MFileTools.cpp
===================================================================
--- trunk/dev/MSDK/MCore/Sources/MFileTools.cpp	(revision 102)
+++ trunk/dev/MSDK/MCore/Sources/MFileTools.cpp	(working copy)
@@ -41,6 +41,7 @@
 	#define rmdir _rmdir
 #else
 	#define mkdir(file) mkdir(file, 0777)
+        #include <unistd.h>
 #endif
 
 static MFileOpenHook* s_fileOpenHook = 0;
Index: trunk/dev/Maratis/Common/MPlugin/MPlugin.cpp
===================================================================
--- trunk/dev/Maratis/Common/MPlugin/MPlugin.cpp	(revision 102)
+++ trunk/dev/Maratis/Common/MPlugin/MPlugin.cpp	(working copy)
@@ -30,64 +30,133 @@
 
 #include <MEngine.h>
 #include "MPlugin.h"
+#include <MWindow.h>
 
+#include <stdio.h>
 
-typedef void * (*FunctionPtr)();
+#ifndef MPLUGIN_DYNAMIC
+#include <map>
+typedef struct _plugin
+{
+  FunctionPtr Start;
+  FunctionPtr End;
+  _plugin() : Start(0), End(0) {}
+  _plugin(FunctionPtr s, FunctionPtr e) : Start(s), End(e) {}
+} plugin;
 
+typedef std::map<const char*, plugin> pluginmap;
+typedef pluginmap::iterator pluginiter;
+pluginmap g_plugindefs;
+
+void AddPluginFunctions(const char* pluginName, FunctionPtr start, FunctionPtr end)
+{
+  plugin p(start, end);
+  g_plugindefs[pluginName] = p;
+}
+#endif
+
+
 MPlugin::MPlugin(void)
 {
+#ifdef MPLUGIN_DYNAMIC
 	m_library = NULL;
+#else
+	Start= 0;
+	End = 0;
+#endif
+	m_loaded = false;
 }
 
 MPlugin::~MPlugin(void)
 {
-	if(m_library)
-	{	
-#ifdef WIN32
-		
-		FunctionPtr function = reinterpret_cast<FunctionPtr>(GetProcAddress(m_library, "EndPlugin"));
-		if(function)
-			 function();
-		FreeLibrary(m_library);
-		
-#else
-		
-		FunctionPtr function = (FunctionPtr)dlsym(m_library, "EndPlugin");
-		if(function)
-			function();
-		dlclose(m_library);
-		
+#ifdef MPLUGIN_DYNAMIC
+    if(m_library)
+    {
+#    ifdef WIN32
+	
+	FunctionPtr function = reinterpret_cast<FunctionPtr>(GetProcAddress(m_library, "EndPlugin"));
+	if(function)
+	    function();
+	FreeLibrary(m_library);
+	
+#    else
+	
+	FunctionPtr function = (FunctionPtr)dlsym(m_library, "EndPlugin");
+	if(function)
+	    function();
+	dlclose(m_library);
+	
+#    endif
+    }
+#else		
+    if(End)
+	End();
 #endif
-	}
 }
 
 void MPlugin::load(const char * filename)
 {
-#ifdef WIN32
+#ifdef MPLUGIN_DYNAMIC
+
+
+	char file[256];
+	MWindow * window = MWindow::getInstance();
 	
-    m_library = LoadLibrary(filename);
-    if(! m_library)
-		return;
+#    ifdef WIN32
+	getGlobalFilename(file, window->getWorkingDirectory(), (string(filename) + ".dll").c_str());
+#    elseif __APPLE__
+	getGlobalFilename(file, window->getWorkingDirectory(), (string(filename) + ".dylib").c_str());
+#    else // just assume a linux based os
+	getGlobalFilename(file, window->getWorkingDirectory(), (string(filename) + ".so").c_str());
+#    endif
 
+#    ifdef WIN32
+    
+    m_library = LoadLibrary(file);
+    if(! m_library);
+    return;
+    
     FunctionPtr function = reinterpret_cast<FunctionPtr>(GetProcAddress(m_library, "StartPlugin"));
     if(! function)
-		return;
+	return;
 
-	m_filename = filename;
+    m_filename = filename;
+    function();	
+    m_loaded = true;
+
+#    else
+    
+    m_library = dlopen(file, RTLD_LAZY);
+    if(! m_library)
+    {
+	printf("%s\n", dlerror());
+	return;
+    }
+    
+    FunctionPtr function = (FunctionPtr)dlsym(m_library, "StartPlugin");
+    if(! function)
+    {
+	printf(dlerror());
+	return;
+    }
+    
+    m_filename = filename;
     function();
-	
+    m_loaded = true;
+    
+#    endif
 #else
-	
-	m_library = dlopen(filename, RTLD_LAZY);
-	if(! m_library)
-		return;
-	
-	FunctionPtr function = (FunctionPtr)dlsym(m_library, "StartPlugin");
-	if(! function)
-		return;
-	
-	m_filename = filename;
-    function();
-
+    // still need to cut up the filename... or something
+    pluginiter iplug = g_plugindefs.find(filename);
+    if(iplug != g_plugindefs.end())
+    {
+	Start = iplug->second.Start;
+	End = iplug->second.End;
+    }
+    if(Start)
+    {
+        Start();
+	m_loaded = true;
+    }
 #endif
-}
\ No newline at end of file
+}
Index: trunk/dev/Maratis/Common/MPlugin/MPlugin.h
===================================================================
--- trunk/dev/Maratis/Common/MPlugin/MPlugin.h	(revision 102)
+++ trunk/dev/Maratis/Common/MPlugin/MPlugin.h	(working copy)
@@ -31,33 +31,111 @@
 #ifndef _M_PLUGIN_H
 #define _M_PLUGIN_H
 
-#ifdef WIN32
-#include <windows.h>
-#else
-#include <dlfcn.h>
-#endif
+#ifdef MPLUGIN_DYNAMIC
+#  ifdef WIN32
+#    include <windows.h>
+#    define MPLUGIN_EXPORT __declspec(dllexport)
+#  else
+// automagically exported
+#    define MPLUGIN_EXPORT
+#    include <dlfcn.h>
+#  endif /*WIN32*/
+#endif/*MPLUGIN_DYNAMIC*/
 
-class MPlugin
+typedef void * (*FunctionPtr)();
+
+class M_ENGINE_EXPORT MPlugin
 {
 public :
 
 	MPlugin(void);
 	~MPlugin(void);
 
-private :
+protected :
 
 	string m_filename;
-	
-#ifdef WIN32
-    HMODULE m_library;
+
+#ifdef MPLUGIN_DYNAMIC	
+#    ifdef WIN32
+	HMODULE m_library;
+#    else
+	void * m_library;
+#    endif
 #else
-	void * m_library;
+        FunctionPtr Start;
+        FunctionPtr End;
+
 #endif
-
+	bool m_loaded;
 public:
 	
 	void load(const char * filename);
 	inline const char * getFilename(void){ return m_filename.c_str(); }
+	inline bool isLoaded(void) { return m_loaded; }
 };
 
-#endif
\ No newline at end of file
+// Some nasty macros to help making plugins for both systems that can dynamically
+// load libraries (ie. sensible systems) and for annoying systems like iOS
+// where we can't have shared objects.
+//
+// to use, in the plugin somewhere do as follows:
+//------------AwesomePlugin.h---------------------------------------------------
+// #include <MPlugin.h>
+// 
+// MPLUGIN_DECLARE(MyAwesomePlugin);
+//------------AwesomePlugin.cpp-------------------------------------------------
+// #include "AwesomePlugin.h"
+//
+// MPLUGIN_START_IMPLEMENT(MyAwesomePlugin)
+// {
+//   // this is where you do your code
+// }
+//
+// MPLUGIN_END_IMPLEMENT(MyAwesomePlugin)
+// {
+//   // cleanup here
+// }
+//
+// Everything else should be taken care of
+
+#ifdef MPLUGIN_DYNAMIC
+#    define MPLUGIN_DECLARE(name)		\
+  extern "C" {					\
+  MPLUGIN_EXPORT void StartPlugin();		\
+  MPLUGIN_EXPORT void EndPlugin();		\
+  }
+
+#    define MPLUGIN_START_IMPLEMENT(name)	\
+  void StartPlugin()
+
+#    define MPLUGIN_END_IMPLEMENT(name)		\
+  void EndPlugin()
+#else
+#    define MPLUGIN_DECLARE(name)			\
+  void StartPlugin##name();				\
+  void EndPlugin##name();				\
+  class Plugin##name##AutoStart				\
+  {							\
+  public:						\
+    Plugin##name##AutoStart();				\
+  }							\
+  extern Plugin##name##AutoStart s_##name##AutoStarter;
+
+#   define MPLUGIN_START_IMPLEMENT(name)				\
+  Plugin##name##AutoStart s_##name##AutoStarter;			\
+  Plugin##name##AutoStart::Plugin##name##AutoStart()			\
+  {									\
+    AddPluginFunctions(#name, &StartPlugin##name, &EndPlugin##name);	\
+  }									\
+  void StartPlugin##name()
+
+#   define MPLUGIN_END_IMPLEMENT(name)		\
+  void EndPlugin##name()
+#endif/*MPLUGIN_DYNAMIC*/
+
+// don't worry about this:
+#ifndef MPLUGIN_DYNAMIC
+void AddPluginFunctions(const char* pluginName, FunctionPtr start, FunctionPtr end);
+#endif
+
+#endif
